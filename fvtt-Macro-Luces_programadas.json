{
  "_id": "dGgR9q531kLppsuZ",
  "name": "Luces programadas",
  "type": "script",
  "sort": 100001,
  "flags": {
    "furnace": {
      "runAsGM": false
    },
    "exportSource": {
      "world": "trueque",
      "system": "sandbox",
      "coreVersion": "0.7.9",
      "systemVersion": "0.6.3"
    }
  },
  "scope": "global",
  "command": "if (canvas.tokens.controlled.length === 0)\n  ui.notifications.error(\"Please select a token\");\n\nlet namedfields = (...fields) => {\n  return (...arr) => {\n    var obj = {};\n    fields.forEach((field, index) => {\n      obj[field] = arr[index];\n    });\n    return obj;\n  };\n};\n\n// Very ugly automated construction below. DRY, but at what cost?\nlet VisionType = namedfields('name', 'dim', 'bright');\nvar visions = (() => {\n  return [\n    VisionType('Leave Unchanged', null, null),\n    VisionType('Self', 5, 0),\n    VisionType('Devil\\'s Sight', 0, 120)\n  ].concat(...[...Array(6).keys()].map(x => (x+1)*30).map(n => {\n    return VisionType(`Darkvision (${n} feet)`, n, 0);\n  }));\n})();\n\nlet LightSource = namedfields('name', 'dim', 'bright', 'angle', 'lockRotation')\nvar lightSources = [\n  LightSource('Leave Unchanged', null, null, null, null),\n  LightSource('None', 0, 0, 360, null),\n  LightSource('Candle', 2, 1, 360, null),\n  LightSource('Torch / Light Cantrip', 5, 2, 360, null),\n  LightSource('Lamp', 7, 3, 360, null),\n  LightSource('Hooded Lantern', 8, 4, 360, null),\n  LightSource('Hooded Lantern (Dim)', 5, 0, 360, null),\n  LightSource('Bullseye Lantern', 10, 5, 52.5, false)\n];\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n<form>\n  <div class=\"form-group\">\n    <label>Vision Type:</label>\n    <select id=\"vision-type\" name=\"vision-type\">\n      ${\n        visions.map((vision, index) => {\n          return `\\t<option value=${index}>${vision.name}</option>`;\n        }).join('\\n')\n      }\n    </select>\n  </div>\n  <div class=\"form-group\">\n    <label>Light Source:</label>\n    <select id=\"light-source\" name=\"light-source\">\n      ${\n        lightSources.map((lightSource, index) => {\n          return `\\t<option value=${index}>${lightSource.name}</option>`;\n        }).join('\\n')\n      }\n    </select>\n  </div>\n  <div class=\"form-group\">\n    <label>Duration in Minutes:</label>\n    <input type=\"number\" id=\"duration\" name=\"duration\" min=\"0\">\n  </div>\n</form>\n`,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionIndex = parseInt(html.find('[name=\"vision-type\"]')[0].value) || 0;\n        let lightIndex = parseInt(html.find('[name=\"light-source\"]')[0].value) || 0;\n        let duration = parseInt(html.find('[name=\"duration\"]')[0].value) || 0;\n\n        if (duration > 0) {\n          if (game.modules.get(\"about-time\").active != true) {\n            ui.notifications.error(\"About Time isn't loaded\");\n          } else {\n            ((backup) => {\n              game.Gametime.doIn({minutes:Math.floor(3 * duration / 4)}, () => {\n                ChatMessage.create({\n                  user: game.user._id,\n                  content: \"The fire burns low...\",\n                  speaker: speaker\n                }, {});\n              });\n            })(Object.assign({}, token.data));\n            ((backup) => {\n              game.Gametime.doIn({minutes:duration}, () => {\n                ChatMessage.create({\n                  user: game.user._id,\n                  content: \"The fire goes out, leaving you in darkness.\",\n                  speaker: speaker\n                }, {});\n                token.update({\n                  vision: true,\n                  dimSight: backup.dimSight,\n                  brightSight: backup.brightSight,\n                  dimLight: backup.dimLight,\n                  brightLight:  backup.brightLight,\n                  lightAngle: backup.lightAngle,\n                  lockRotation: backup.lockRotation\n                });\n              });\n            })(Object.assign({}, token.data));\n          }\n        }\n\n        // Configure new token vision\n        let dimSight = visions[visionIndex].dim ?? token.data.dimSight;\n        let brightSight = visions[visionIndex].bright ?? token.data.brightSight;\n        let dimLight = lightSources[lightIndex].dim ?? token.data.dimLight;\n        let brightLight = lightSources[lightIndex].bright ?? token.data.brightLight;\n        let lightAngle = lightSources[lightIndex].angle ?? token.data.lightAngle;\n        let lockRotation = lightSources[lightIndex].lockRotation ?? token.data.lockRotation;\n\n        // Update Token\n        console.log(token);\n        token.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          dimLight: dimLight,\n          brightLight:  brightLight,\n          lightAngle: lightAngle,\n          lockRotation: lockRotation\n        });\n      }\n    }\n  }\n}).render(true);",
  "author": "eUp50nEprJoNBigj",
  "img": "modules/game-icons-net/blackbackground/flashlight.svg",
  "actorIds": []
}